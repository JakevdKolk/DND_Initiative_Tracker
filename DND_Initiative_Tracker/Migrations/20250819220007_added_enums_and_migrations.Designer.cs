// <auto-generated />
using DND_Initiative_Tracker.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DND_Initiative_Tracker.Migrations
{
    [DbContext(typeof(DnDDbContext))]
    [Migration("20250819220007_added_enums_and_migrations")]
    partial class added_enums_and_migrations
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "public", "action_type", new[] { "action", "bonus_action", "reaction", "trait", "legendary_action", "lair_action", "mythical_action" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "public", "damage_type_category", new[] { "resistant", "vulnerable", "immune", "none" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "public", "death_status", new[] { "stable", "alive", "dying", "dead" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "public", "size", new[] { "Tiny", "Small", "Medium", "Large", "Huge", "Gargantuan" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "public", "skill_type", new[] { "skill", "tool", "instrument" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DND_Initiative_Tracker.Models.AbilityScoreType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("AbilityScoreTypes");
                });

            modelBuilder.Entity("DND_Initiative_Tracker.Models.ActionEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ActionType")
                        .HasColumnType("integer");

                    b.Property<int?>("Area")
                        .HasColumnType("integer");

                    b.Property<int?>("AttackBonus")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("Range")
                        .HasColumnType("integer");

                    b.Property<int?>("Reach")
                        .HasColumnType("integer");

                    b.Property<string>("Recharge")
                        .HasColumnType("text");

                    b.Property<string>("SaveDc")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ActionType")
                        .HasDatabaseName("idx_action_type");

                    b.ToTable("Actions");
                });

            modelBuilder.Entity("DND_Initiative_Tracker.Models.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DND_Initiative_Tracker.Models.Campaign", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("DriveLink")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("VttLink")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Campaigns");
                });

            modelBuilder.Entity("DND_Initiative_Tracker.Models.CampaignUser", b =>
                {
                    b.Property<int>("CampaignId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("CampaignId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("CampaignUsers");
                });

            modelBuilder.Entity("DND_Initiative_Tracker.Models.Condition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Conditions");
                });

            modelBuilder.Entity("DND_Initiative_Tracker.Models.Creature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("Ac")
                        .HasColumnType("integer");

                    b.Property<int?>("Hp")
                        .HasColumnType("integer");

                    b.Property<int?>("HpDiceBonus")
                        .HasColumnType("integer");

                    b.Property<int?>("HpDiceCount")
                        .HasColumnType("integer");

                    b.Property<int?>("HpDiceSize")
                        .HasColumnType("integer");

                    b.Property<int?>("InitiativeBonus")
                        .HasColumnType("integer");

                    b.Property<bool?>("IsNpc")
                        .HasColumnType("boolean");

                    b.Property<int?>("LairInitiative")
                        .HasColumnType("integer");

                    b.Property<int?>("LegendaryActionCharges")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<int?>("OwnerUserId")
                        .HasColumnType("integer");

                    b.Property<int?>("ProficiencyBonus")
                        .HasColumnType("integer");

                    b.Property<int?>("Size")
                        .HasColumnType("integer");

                    b.Property<int?>("TypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OwnerUserId")
                        .HasDatabaseName("idx_user_owner_creature");

                    b.HasIndex("TypeId");

                    b.ToTable("Creatures");
                });

            modelBuilder.Entity("DND_Initiative_Tracker.Models.CreatureAbilityScores", b =>
                {
                    b.Property<int>("CreatureId")
                        .HasColumnType("integer");

                    b.Property<int>("AbilityScoreId")
                        .HasColumnType("integer");

                    b.Property<bool?>("IsSavingThrowProficient")
                        .HasColumnType("boolean");

                    b.Property<int?>("Score")
                        .HasColumnType("integer");

                    b.HasKey("CreatureId", "AbilityScoreId");

                    b.HasIndex("AbilityScoreId");

                    b.ToTable("CreatureAbilityScores");
                });

            modelBuilder.Entity("DND_Initiative_Tracker.Models.CreatureAction", b =>
                {
                    b.Property<int>("CreatureId")
                        .HasColumnType("integer");

                    b.Property<int>("ActionId")
                        .HasColumnType("integer");

                    b.Property<bool?>("SpellPrepared")
                        .HasColumnType("boolean");

                    b.HasKey("CreatureId", "ActionId");

                    b.HasIndex("ActionId");

                    b.ToTable("CreatureActions");
                });

            modelBuilder.Entity("DND_Initiative_Tracker.Models.CreatureCondition", b =>
                {
                    b.Property<int>("CreatureId")
                        .HasColumnType("integer");

                    b.Property<int>("ConditionId")
                        .HasColumnType("integer");

                    b.Property<int?>("ConditionLength")
                        .HasColumnType("integer");

                    b.HasKey("CreatureId", "ConditionId");

                    b.HasIndex("ConditionId");

                    b.ToTable("CreatureConditions");
                });

            modelBuilder.Entity("DND_Initiative_Tracker.Models.CreatureDamageType", b =>
                {
                    b.Property<int>("CreatureId")
                        .HasColumnType("integer");

                    b.Property<int>("DamageTypeId")
                        .HasColumnType("integer");

                    b.Property<int?>("DamageTypeCategory")
                        .HasColumnType("integer");

                    b.HasKey("CreatureId", "DamageTypeId");

                    b.HasIndex("DamageTypeCategory")
                        .HasDatabaseName("idx_damage_type_category");

                    b.HasIndex("DamageTypeId");

                    b.ToTable("CreatureDamageTypes");
                });

            modelBuilder.Entity("DND_Initiative_Tracker.Models.CreatureEncounter", b =>
                {
                    b.Property<int>("CreatureId")
                        .HasColumnType("integer");

                    b.Property<int>("EncounterId")
                        .HasColumnType("integer");

                    b.Property<int?>("CurrentHp")
                        .HasColumnType("integer");

                    b.Property<int?>("DeathStatus")
                        .HasColumnType("integer");

                    b.Property<decimal?>("Initiative")
                        .HasPrecision(5, 2)
                        .HasColumnType("numeric(5,2)");

                    b.Property<int?>("TempHp")
                        .HasColumnType("integer");

                    b.HasKey("CreatureId", "EncounterId");

                    b.HasIndex("DeathStatus")
                        .HasDatabaseName("idx_encounter_death_status");

                    b.HasIndex("EncounterId", "Initiative")
                        .IsDescending(false, true)
                        .HasDatabaseName("idx_initiative");

                    b.ToTable("CreatureEncounters");
                });

            modelBuilder.Entity("DND_Initiative_Tracker.Models.CreatureLanguage", b =>
                {
                    b.Property<int>("CreatureId")
                        .HasColumnType("integer");

                    b.Property<int>("LanguageId")
                        .HasColumnType("integer");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.HasKey("CreatureId", "LanguageId");

                    b.HasIndex("LanguageId");

                    b.ToTable("CreatureLanguages");
                });

            modelBuilder.Entity("DND_Initiative_Tracker.Models.CreatureSense", b =>
                {
                    b.Property<int>("CreatureId")
                        .HasColumnType("integer");

                    b.Property<int>("SenseId")
                        .HasColumnType("integer");

                    b.Property<int?>("Distance")
                        .HasColumnType("integer");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.HasKey("CreatureId", "SenseId");

                    b.HasIndex("SenseId");

                    b.ToTable("CreatureSenses");
                });

            modelBuilder.Entity("DND_Initiative_Tracker.Models.CreatureSkill", b =>
                {
                    b.Property<int>("CreatureId")
                        .HasColumnType("integer");

                    b.Property<int>("SkillId")
                        .HasColumnType("integer");

                    b.Property<int?>("BonusOverride")
                        .HasColumnType("integer");

                    b.Property<bool?>("IsExpertise")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsProficient")
                        .HasColumnType("boolean");

                    b.HasKey("CreatureId", "SkillId");

                    b.HasIndex("SkillId");

                    b.ToTable("CreatureSkills");
                });

            modelBuilder.Entity("DND_Initiative_Tracker.Models.CreatureSpeed", b =>
                {
                    b.Property<int>("CreatureId")
                        .HasColumnType("integer");

                    b.Property<int>("SpeedId")
                        .HasColumnType("integer");

                    b.Property<bool?>("IsHover")
                        .HasColumnType("boolean");

                    b.Property<int?>("SpeedValue")
                        .HasColumnType("integer");

                    b.HasKey("CreatureId", "SpeedId");

                    b.HasIndex("SpeedId");

                    b.ToTable("CreatureSpeeds");
                });

            modelBuilder.Entity("DND_Initiative_Tracker.Models.CreatureType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CreatureTypes");
                });

            modelBuilder.Entity("DND_Initiative_Tracker.Models.DamageType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DamageTypes");
                });

            modelBuilder.Entity("DND_Initiative_Tracker.Models.Encounter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CampaignId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<int?>("TurnCount")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CampaignId");

                    b.ToTable("Encounters");
                });

            modelBuilder.Entity("DND_Initiative_Tracker.Models.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("DND_Initiative_Tracker.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("DND_Initiative_Tracker.Models.Sense", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Senses");
                });

            modelBuilder.Entity("DND_Initiative_Tracker.Models.Skill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("SkillType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SkillType")
                        .HasDatabaseName("idx_skill_type");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("DND_Initiative_Tracker.Models.Speed", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Speeds");
                });

            modelBuilder.Entity("DND_Initiative_Tracker.Models.Spell", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool?>("Concentration")
                        .HasColumnType("boolean");

                    b.Property<int?>("Duration")
                        .HasColumnType("integer");

                    b.Property<string>("School")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Spells");
                });

            modelBuilder.Entity("DND_Initiative_Tracker.Models.SpellAction", b =>
                {
                    b.Property<int>("SpellId")
                        .HasColumnType("integer");

                    b.Property<int>("ActionId")
                        .HasColumnType("integer");

                    b.HasKey("SpellId", "ActionId");

                    b.HasIndex("ActionId");

                    b.ToTable("SpellActions");
                });

            modelBuilder.Entity("DND_Initiative_Tracker.Models.AppUser", b =>
                {
                    b.HasOne("DND_Initiative_Tracker.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Role");
                });

            modelBuilder.Entity("DND_Initiative_Tracker.Models.CampaignUser", b =>
                {
                    b.HasOne("DND_Initiative_Tracker.Models.Campaign", "Campaign")
                        .WithMany("CampaignUsers")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DND_Initiative_Tracker.Models.AppUser", "User")
                        .WithMany("CampaignUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campaign");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DND_Initiative_Tracker.Models.Creature", b =>
                {
                    b.HasOne("DND_Initiative_Tracker.Models.AppUser", "OwnerUser")
                        .WithMany("OwnedCreatures")
                        .HasForeignKey("OwnerUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("DND_Initiative_Tracker.Models.CreatureType", "Type")
                        .WithMany("Creatures")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("OwnerUser");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("DND_Initiative_Tracker.Models.CreatureAbilityScores", b =>
                {
                    b.HasOne("DND_Initiative_Tracker.Models.AbilityScoreType", "AbilityScoreType")
                        .WithMany("CreatureScores")
                        .HasForeignKey("AbilityScoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DND_Initiative_Tracker.Models.Creature", "Creature")
                        .WithMany("AbilityScores")
                        .HasForeignKey("CreatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AbilityScoreType");

                    b.Navigation("Creature");
                });

            modelBuilder.Entity("DND_Initiative_Tracker.Models.CreatureAction", b =>
                {
                    b.HasOne("DND_Initiative_Tracker.Models.ActionEntity", "Action")
                        .WithMany("CreatureActions")
                        .HasForeignKey("ActionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DND_Initiative_Tracker.Models.Creature", "Creature")
                        .WithMany("Actions")
                        .HasForeignKey("CreatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Action");

                    b.Navigation("Creature");
                });

            modelBuilder.Entity("DND_Initiative_Tracker.Models.CreatureCondition", b =>
                {
                    b.HasOne("DND_Initiative_Tracker.Models.Condition", "Condition")
                        .WithMany("CreatureConditions")
                        .HasForeignKey("ConditionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DND_Initiative_Tracker.Models.Creature", "Creature")
                        .WithMany("Conditions")
                        .HasForeignKey("CreatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Condition");

                    b.Navigation("Creature");
                });

            modelBuilder.Entity("DND_Initiative_Tracker.Models.CreatureDamageType", b =>
                {
                    b.HasOne("DND_Initiative_Tracker.Models.Creature", "Creature")
                        .WithMany("DamageTypes")
                        .HasForeignKey("CreatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DND_Initiative_Tracker.Models.DamageType", "DamageType")
                        .WithMany("CreatureDamageTypes")
                        .HasForeignKey("DamageTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creature");

                    b.Navigation("DamageType");
                });

            modelBuilder.Entity("DND_Initiative_Tracker.Models.CreatureEncounter", b =>
                {
                    b.HasOne("DND_Initiative_Tracker.Models.Creature", "Creature")
                        .WithMany("CreatureEncounters")
                        .HasForeignKey("CreatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DND_Initiative_Tracker.Models.Encounter", "Encounter")
                        .WithMany("CreatureEncounters")
                        .HasForeignKey("EncounterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creature");

                    b.Navigation("Encounter");
                });

            modelBuilder.Entity("DND_Initiative_Tracker.Models.CreatureLanguage", b =>
                {
                    b.HasOne("DND_Initiative_Tracker.Models.Creature", "Creature")
                        .WithMany("Languages")
                        .HasForeignKey("CreatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DND_Initiative_Tracker.Models.Language", "Language")
                        .WithMany("CreatureLanguages")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creature");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("DND_Initiative_Tracker.Models.CreatureSense", b =>
                {
                    b.HasOne("DND_Initiative_Tracker.Models.Creature", "Creature")
                        .WithMany("Senses")
                        .HasForeignKey("CreatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DND_Initiative_Tracker.Models.Sense", "Sense")
                        .WithMany("CreatureSenses")
                        .HasForeignKey("SenseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creature");

                    b.Navigation("Sense");
                });

            modelBuilder.Entity("DND_Initiative_Tracker.Models.CreatureSkill", b =>
                {
                    b.HasOne("DND_Initiative_Tracker.Models.Creature", "Creature")
                        .WithMany("Skills")
                        .HasForeignKey("CreatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DND_Initiative_Tracker.Models.Skill", "Skill")
                        .WithMany("CreatureSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creature");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("DND_Initiative_Tracker.Models.CreatureSpeed", b =>
                {
                    b.HasOne("DND_Initiative_Tracker.Models.Creature", "Creature")
                        .WithMany("Speeds")
                        .HasForeignKey("CreatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DND_Initiative_Tracker.Models.Speed", "Speed")
                        .WithMany("CreatureSpeeds")
                        .HasForeignKey("SpeedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creature");

                    b.Navigation("Speed");
                });

            modelBuilder.Entity("DND_Initiative_Tracker.Models.Encounter", b =>
                {
                    b.HasOne("DND_Initiative_Tracker.Models.Campaign", "Campaign")
                        .WithMany("Encounters")
                        .HasForeignKey("CampaignId");

                    b.Navigation("Campaign");
                });

            modelBuilder.Entity("DND_Initiative_Tracker.Models.SpellAction", b =>
                {
                    b.HasOne("DND_Initiative_Tracker.Models.ActionEntity", "Action")
                        .WithMany("SpellActions")
                        .HasForeignKey("ActionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DND_Initiative_Tracker.Models.Spell", "Spell")
                        .WithMany("SpellActions")
                        .HasForeignKey("SpellId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Action");

                    b.Navigation("Spell");
                });

            modelBuilder.Entity("DND_Initiative_Tracker.Models.AbilityScoreType", b =>
                {
                    b.Navigation("CreatureScores");
                });

            modelBuilder.Entity("DND_Initiative_Tracker.Models.ActionEntity", b =>
                {
                    b.Navigation("CreatureActions");

                    b.Navigation("SpellActions");
                });

            modelBuilder.Entity("DND_Initiative_Tracker.Models.AppUser", b =>
                {
                    b.Navigation("CampaignUsers");

                    b.Navigation("OwnedCreatures");
                });

            modelBuilder.Entity("DND_Initiative_Tracker.Models.Campaign", b =>
                {
                    b.Navigation("CampaignUsers");

                    b.Navigation("Encounters");
                });

            modelBuilder.Entity("DND_Initiative_Tracker.Models.Condition", b =>
                {
                    b.Navigation("CreatureConditions");
                });

            modelBuilder.Entity("DND_Initiative_Tracker.Models.Creature", b =>
                {
                    b.Navigation("AbilityScores");

                    b.Navigation("Actions");

                    b.Navigation("Conditions");

                    b.Navigation("CreatureEncounters");

                    b.Navigation("DamageTypes");

                    b.Navigation("Languages");

                    b.Navigation("Senses");

                    b.Navigation("Skills");

                    b.Navigation("Speeds");
                });

            modelBuilder.Entity("DND_Initiative_Tracker.Models.CreatureType", b =>
                {
                    b.Navigation("Creatures");
                });

            modelBuilder.Entity("DND_Initiative_Tracker.Models.DamageType", b =>
                {
                    b.Navigation("CreatureDamageTypes");
                });

            modelBuilder.Entity("DND_Initiative_Tracker.Models.Encounter", b =>
                {
                    b.Navigation("CreatureEncounters");
                });

            modelBuilder.Entity("DND_Initiative_Tracker.Models.Language", b =>
                {
                    b.Navigation("CreatureLanguages");
                });

            modelBuilder.Entity("DND_Initiative_Tracker.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("DND_Initiative_Tracker.Models.Sense", b =>
                {
                    b.Navigation("CreatureSenses");
                });

            modelBuilder.Entity("DND_Initiative_Tracker.Models.Skill", b =>
                {
                    b.Navigation("CreatureSkills");
                });

            modelBuilder.Entity("DND_Initiative_Tracker.Models.Speed", b =>
                {
                    b.Navigation("CreatureSpeeds");
                });

            modelBuilder.Entity("DND_Initiative_Tracker.Models.Spell", b =>
                {
                    b.Navigation("SpellActions");
                });
#pragma warning restore 612, 618
        }
    }
}
